# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  coverImage: String
  slug: String!
  restaurants: [Restaurant!]
  restaurantCount: Int!
}

type DishChoice {
  name: String!
  extra: Float
}

type DishOptions {
  name: String!
  choices: [DishChoice!]
  extra: Float
}

type Dish {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  coverImage: String
  price: Float!
  description: String!
  restaurant: Restaurant!
  options: [DishOptions!]
}

type OrderItem {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  options: [DishOptions!]
}

type Order {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  customer: User!
  driver: User
  restaurant: Restaurant
  items: [OrderItem!]!
  total: Float
  status: OrderStatus!
}

enum OrderStatus {
  Pending
  Cooking
  PickedUp
  Delivered
}

type Restaurant {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  coverImage: String!
  address: String!
  category: Category
  owner: User!
  menu: [Dish!]!
  orders: [Order!]!
}

type User {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
  orders: [Order!]!
  rides: [Order!]!
}

enum UserRole {
  Client
  Owner
  Delivery
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

type EditAccountOutput {
  error: String
  ok: Boolean!
}

type LoginAccountOutput {
  error: String
  ok: Boolean!
  token: String
}

type UserAccountOutput {
  error: String
  ok: Boolean!
  user: User
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}

type AllCategoriesOutput {
  error: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  error: String
  ok: Boolean!
  totalPages: Int
  totalItems: Int
  category: Category
}

type CreateDishOutput {
  error: String
  ok: Boolean!
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

type EditRestaurantOutput {
  error: String
  ok: Boolean!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  totalPages: Int
  totalItems: Int
  restaurants: [Restaurant!]
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  totalPages: Int
  totalItems: Int
  restaurants: [Restaurant!]
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
}

type Query {
  allCategories: AllCategoriesOutput!
  category(input: CategoryInput!): CategoryOutput!
  Restaurants(input: RestaurantsInput!): RestaurantsOutput!
  Restaurant(input: RestaurantInput!): RestaurantOutput!
  searchRestaurant(input: SearchRestaurantInput!): SearchRestaurantOutput!
  me: User!
  user(userId: Float!): UserAccountOutput!
}

input CategoryInput {
  page: Int! = 1
  slug: String!
}

input RestaurantsInput {
  page: Int! = 1
}

input RestaurantInput {
  restaurantId: Float!
}

input SearchRestaurantInput {
  page: Int! = 1
  query: String!
}

type Mutation {
  createDish(input: CreateDishInput!): CreateDishOutput!
  deleteDish(input: DeleteDishInput!): DeleteRestaurantOutput!
  editDish(input: EditDishInput!): EditDishOutput!
  createRestaurant(input: CreateRestaurantInput!): CreateRestaurantOutput!
  editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): EditRestaurantOutput!
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  loginAccount(input: LoginAccountInput!): LoginAccountOutput!
  editProfile(input: EditAccountInput!): EditAccountOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  createOrder(input: CreateOrderInput!): CreateOrderOutput!
}

input CreateDishInput {
  name: String!
  price: Float!
  description: String!
  options: [DishOptionsInputType!]
  restaurantId: Float!
}

input DishOptionsInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extra: Float
}

input DishChoiceInputType {
  name: String!
  extra: Float
}

input DeleteDishInput {
  dishId: Float!
}

input EditDishInput {
  name: String
  price: Float
  description: String
  options: [DishOptionsInputType!]
  dishId: Float!
}

input CreateRestaurantInput {
  name: String!
  coverImage: String!
  address: String!
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  coverImage: String
  address: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input LoginAccountInput {
  email: String!
  password: String!
}

input EditAccountInput {
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input CreateOrderInput {
  restaurantId: Float!
  items: [CreateOrderItemInput!]!
}

input CreateOrderItemInput {
  dishId: Float!
  options: [OrderItemOptionInputType!]
}

input OrderItemOptionInputType {
  name: String!
  choice: String
}